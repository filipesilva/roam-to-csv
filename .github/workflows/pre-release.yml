name: Pre-Release

# Run this job when a new pre-release is created on github.
# Then wait for all artifacts to be uploaded before releasing it.
on:
  release:
    types: [prereleased]
  # NOTE: uncomment the PR trigger to test changes
  # pull_request:
  #   branches: [ "master" ]    

jobs:
  release:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        include:
          - os: ubuntu-latest
            platform-name: linux-amd64
            archive_util: tar
          - os: macos-latest
            platform-name: macos-amd64
            archive_util: tar
          - os: windows-latest
            platform-name: windows-amd64
            bin-extension: .exe
            # The default tar in macos executors can sometimes corrupt bin files, but gtar doesn't.
            # See https://github.com/actions/runner-images/issues/2619#issuecomment-1041125521
            archive_util: gtar

    steps:
      - uses: actions/checkout@v3
      
      - uses: graalvm/setup-graalvm@v1
        with:
          version: 'latest'
          java-version: '17'
          components: 'native-image'
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install clojure tools
        uses: DeLaGuardo/setup-clojure@10.1
        with:
          cli: 1.11.1.1189
          bb: 1.0.168
          
      - run: java --version
      - run: bb --version

      - name: Build binary
        run: bb native-image

      - name: Check binary runs
        run: ./roam-to-csv --help

      # From https://federicoterzi.com/blog/automatic-code-signing-and-notarization-for-macos-apps-using-github-actions/
      - name: Codesign binary
        if: matrix.os == 'macos-latest'
        env:
          MACOS_CERTIFICATE: ${{ secrets.PROD_MACOS_CERTIFICATE }}
          MACOS_CERTIFICATE_PWD: ${{ secrets.PROD_MACOS_CERTIFICATE_PWD }}
          MACOS_CERTIFICATE_NAME: ${{ secrets.PROD_MACOS_CERTIFICATE_NAME }}
          MACOS_CI_KEYCHAIN_PWD: ${{ secrets.PROD_MACOS_CI_KEYCHAIN_PWD }}
        run: |
          # Turn our base64-encoded certificate back to a regular .p12 file

          echo $MACOS_CERTIFICATE | base64 --decode > certificate.p12

          # We need to create a new keychain, otherwise using the certificate will prompt
          # with a UI dialog asking for the certificate password, which we can't
          # use in a headless CI environment

          security create-keychain -p "$MACOS_CI_KEYCHAIN_PWD" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "$MACOS_CI_KEYCHAIN_PWD" build.keychain
          security import certificate.p12 -k build.keychain -P "$MACOS_CERTIFICATE_PWD" -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$MACOS_CI_KEYCHAIN_PWD" build.keychain

          # We finally codesign our app bundle, specifying the Hardened runtime option

          /usr/bin/codesign --force -s "$MACOS_CERTIFICATE_NAME" --options runtime roam-to-csv -v

      - name: Notarize binary
        if: matrix.os == 'macos-latest'
        env:
          PROD_MACOS_NOTARIZATION_APPLE_ID: ${{ secrets.PROD_MACOS_NOTARIZATION_APPLE_ID }}
          PROD_MACOS_NOTARIZATION_TEAM_ID: ${{ secrets.PROD_MACOS_NOTARIZATION_TEAM_ID }}
          PROD_MACOS_NOTARIZATION_PWD: ${{ secrets.PROD_MACOS_NOTARIZATION_PWD }}
        run: |
          # Store the notarization credentials so that we can prevent a UI password dialog
          # from blocking the CI

          echo "Create keychain profile"
          xcrun notarytool store-credentials "notarytool-profile" --apple-id "$PROD_MACOS_NOTARIZATION_APPLE_ID" --team-id "$PROD_MACOS_NOTARIZATION_TEAM_ID" --password "$PROD_MACOS_NOTARIZATION_PWD"

          # We can't notarize an app bundle directly, but we need to compress it as an archive.
          # Therefore, we create a zip file containing our app bundle, so that we can send it to the
          # notarization service

          echo "Creating temp notarization archive"
          ditto -c -k --keepParent "roam-to-csv" "notarization.zip"

          # Here we send the notarization request to the Apple's Notarization service, waiting for the result.
          # This typically takes a few seconds inside a CI environment, but it might take more depending on the App
          # characteristics. Visit the Notarization docs for more information and strategies on how to optimize it if
          # you're curious

          echo "Notarize app"
          xcrun notarytool submit "notarization.zip" --keychain-profile "notarytool-profile" --wait

          # Note: Skipping this step, as binaries cannot be stapled
          #       See https://developer.apple.com/forums/thread/114961
          # Finally, we need to "attach the staple" to our executable, which will allow our app to be
          # validated by macOS even when an internet connection is not available.
          # echo "Attach staple"
          # xcrun stapler staple "roam-to-csv"  

      - name: Create archive
        run: ${{ matrix.archive_util }} -czf roam-to-csv-${{ github.event.release.tag_name }}-${{ matrix.platform-name }}.tar.gz roam-to-csv${{ matrix.bin-extension }}

      - name: Add binary to release
        if: github.event.release.tag_name
        uses: ncipollo/release-action@v1
        with:
          omitBody: true
          allowUpdates: true
          prerelease: true
          tag: ${{ github.event.release.tag_name }}
          artifacts: "roam-to-csv-${{ github.event.release.tag_name }}-${{ matrix.platform-name }}.tar.gz"
          token: ${{ secrets.GITHUB_TOKEN }}

  test-native:
    runs-on: ${{ matrix.os }}
    needs: [release]
    if: github.event.release.tag_name
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        include:
          - os: ubuntu-latest
            platform-name: linux-amd64
          - os: macos-latest
            platform-name: macos-amd64
          - os: windows-latest
            platform-name: windows-amd64

    steps:
      - uses: actions/checkout@v3

      - name: Install clojure tools
        uses: DeLaGuardo/setup-clojure@10.1
        with:
          bb: 1.0.168

      - run: curl -OL https://github.com/filipesilva/roam-to-csv/releases/download/${{ github.event.release.tag_name }}/roam-to-csv-${{ github.event.release.tag_name }}-${{ matrix.platform-name }}.tar.gz
      - run: tar -xvf roam-to-csv-${{ github.event.release.tag_name }}-${{ matrix.platform-name }}.tar.gz

      - name: run tests over native bin
        run: bb test --native
